/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Pathway } from "./Pathway";
import { PathwayCountArgs } from "./PathwayCountArgs";
import { PathwayFindManyArgs } from "./PathwayFindManyArgs";
import { PathwayFindUniqueArgs } from "./PathwayFindUniqueArgs";
import { CreatePathwayArgs } from "./CreatePathwayArgs";
import { UpdatePathwayArgs } from "./UpdatePathwayArgs";
import { DeletePathwayArgs } from "./DeletePathwayArgs";
import { PathwayService } from "../pathway.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Pathway)
export class PathwayResolverBase {
  constructor(
    protected readonly service: PathwayService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Pathway",
    action: "read",
    possession: "any",
  })
  async _pathwaysMeta(
    @graphql.Args() args: PathwayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Pathway])
  @nestAccessControl.UseRoles({
    resource: "Pathway",
    action: "read",
    possession: "any",
  })
  async pathways(
    @graphql.Args() args: PathwayFindManyArgs
  ): Promise<Pathway[]> {
    return this.service.pathways(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Pathway, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pathway",
    action: "read",
    possession: "own",
  })
  async pathway(
    @graphql.Args() args: PathwayFindUniqueArgs
  ): Promise<Pathway | null> {
    const result = await this.service.pathway(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pathway)
  @nestAccessControl.UseRoles({
    resource: "Pathway",
    action: "create",
    possession: "any",
  })
  async createPathway(
    @graphql.Args() args: CreatePathwayArgs
  ): Promise<Pathway> {
    return await this.service.createPathway({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pathway)
  @nestAccessControl.UseRoles({
    resource: "Pathway",
    action: "update",
    possession: "any",
  })
  async updatePathway(
    @graphql.Args() args: UpdatePathwayArgs
  ): Promise<Pathway | null> {
    try {
      return await this.service.updatePathway({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pathway)
  @nestAccessControl.UseRoles({
    resource: "Pathway",
    action: "delete",
    possession: "any",
  })
  async deletePathway(
    @graphql.Args() args: DeletePathwayArgs
  ): Promise<Pathway | null> {
    try {
      return await this.service.deletePathway(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
